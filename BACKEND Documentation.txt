(3/15/21)
**************************************************************************
Hey y'all, it's Adam. Here are the backend goals going forward, as transposed by Chloe: 

******************************SPRINT 3 Goals******************************

From zoom dm's:
To-dos: 1. make a testing ground separate from the project but put it in the git hub
2. Figure out how to use typescript to query w/ angular
3. determine how ang understands queries as components
4. "idea: let's start by running k-means in typescript on our data to see whether we think the 
clusters are sufficient or if we'll need graph spectral to get clusters that aren't garbage so we can 
better formulate a plan. graph spectral might not be possible with queries, so we won't want to do the work 
with queries only to find out that isn't going to work"
Tentative Goals/goal adjacent statments:
- Run k-means++ in typescript on actual data to determine whether it is sufficient
- If it's insufficient, program spectral clustering in typescript
- If it is sufficient, figure out how to run it with queries
- If the k-means in the paper isn't ++, look into lloyd's algorithm
- Figure out how those queries will work in Angular
***************************************************************************

(3/15/21)
***************************************************************************
Merged the GoldinGuy K-Means-TS gitHub with our project (I think). For future changes, I would like us to 
make a plain English note of what we did before we git push the code. Of course, it could be something really 
simple and for code changes, put comments around what you change or add. ~Adam

(3/16/21)
***************************************************************************
There was an error in my initial push, so the KS-MEANS-TS folder did not make an appearnce as intended.
The node_modules folder did show on the repo after some late-night troubleshooting.
I used this terminal command: 'npm i --save-dev @types/node'.
What I have and what I pushed should match, but they do not. Will invesitgate further.
On my rig, the KS-MEANS-TS folder is there. Also, I realized that gitHub has you explain the 
changes you make anyway. ~Adam

(3/17/21)
***************************************************************************
We were able to get all of the files from Goldin Guy's k-means onto the git repo.
Adam still has some funky stuff going on with his local machine, but Sasha and I have everything.
Next step is to run this on some real data! ~chloe

(3/22/21)
***************************************************************************
Hey y'all, it's Adam. Here is what happened in today's meeting.
Sasha demoed some code and pushed it to GitHub. As the backend team,
we will take a closer look at all that and see about how we can knock out our goals:
1.Find a way to save the k-means ++ output as a text file
2. Make an Excel Spreadsheet with the schools and their corresponding number
3. Validity Assessment (Compare these runs to past examples)
4. Figure out in plain English what we need: 
    4a. End-users will send a 'request': class, gender, sport, and # of sectionals... 
        How do we process those variables in the k-means++ code?
    4b. Talk it out with Front-End. Sooner we all get on the same page, the better.
5. Work with Kam on database and see how we can SQL query in typescript
   /if we want to also just use data hosted on there versus having it already in ts.
6. Elevator Pitch: Talk about these changes intelligently and why we chose the direction that we did.
7. Poster board: Be thinking about how ours should look. Will put examples from years past in the Discord.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
In general, this is what we want:
End-user specifies the data: "class, gneder, sport, # of sectionals, etc." --> 
data is grabbed from database --> 
calculation is ran on typescript--> 
end-users receive: sectional groups, teams in those groups, and k-means graphic (and the option to download it all?).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

(3/22/21)
***************************************************************************
Created the 'Sectional Icons' folder and added 21 differently colored dot PNGs. They will be used for the 
"key" on our k-means graphic and will correspond to the location of a school and its sectional color. 
We also need to be cognizant of the fact that when we specify 8 groups (sectionals), the program will make
9 groups (0-8). Need to rectify this/ compensate for it once we start taking input from end-users. ~Adam

(3/24/21)
***************************************************************************
Hey y'all, it's Adam. Here is what happened in today's meeting:
We aksed the question, "How can we best have our data organized so the algorithm can 'talk' with it?"
Some options we came up with:
1. Text file within the project that is referenced. <-- Leaning toward this because then we don't have 
to worry about "logic gates" issue a la database screwy-ness.
2. Take information from a spreadsheet hosted on the database in real-time.

What we ended up doing:
Dalton made an Excel spreadhseet with (most) of the school names, and their sport classifications. 
Then he saved it as a text document and pushed it to the repo.
Still trying to iron out the kinks/ add information.
Kam posted the school coordinates in the Discord.

For Monday:
Research using typescript to pull IDs.
Research using typescript for SQL queries.

(3/29/21)
***************************************************************************
Chloe got python program to work for plotting the points. This is to validate the results of the K Means++ algorithm we've found.
I have updated the groupedArr ( TRY3 ) that should be correctly grouped now.
Next step, IF algorithm works correctly, is to match centroids to host school.
Then it is possible to get the (physical) distances of schools in cluster from the host school.
Note: we are currently working with ALL schools--this will (almost) never be the case. -Sasha

(4/7/21)
***************************************************************************
Cleaned up code in K means folder that was about the longlat txt file and setting up groups of schools and host schools.
NOTE FOR NEXT TEAM: In the K-Means-TS-master, in runningKMeans, kMeansTesting2.ts runs the k means++ on schools. Most important.
Needs connection to front end. For grouping algorithm, we used: https://github.com/GoldinGuy/K-Means-TS
Validity of grouping algorithm and locating host schools not determined. Ineffective to apply for all schools.

Currently looking into getting driving distances. Google Maps API is paid and has limits if we don't have money.
OSRM is free and may be an alternative. Researching that currently. -Sasha

(4/11/21)
***************************************************************************
Met with Grant B. over the weekend to discuss how the algorithm may be ran through the front-end.
(1). We think the answer might be as simple as moving the KS-Means-TS-master folder to its own spot in the 
src file. We will have to flesh that out more. We can create a matching CSS component to know if it runs or not.

(2) We want to test how changing something on the frontend will change something on the backend through the creation of a 
variable. Nothing super complex, just a way to show how FE and BE can 'talk' to each other. 

In summary:
(1). Get algorithm (and everything needed for the algorithm) to run in the src code.
(2). Make a sectional variable manipulated by end-users to change the # of sectionals (groups) read into the algorithm.

Further testing is needed to verify (1) and then move to (2). ~Adam
